// Developer Express Code Central Example:
// How to provide cylindrical equal-area projections of a map
// 
// This example illustrates how to get map equal-area projections (Lambert,
// Behrmann, Tristan Edwards, Peters, Gall orthographic and Balthasart) for the
// shapes loaded from the Shapefiles (Countries.shp, Countries.dbf).
// 
// To
// accomplish this task, create an EqualAreaProjection object and assign it to the
// VectorLayerBase.MapProjection
// (http://documentation.devexpress.com/#WPF/DevExpressXpfMapVectorLayerBase_MapProjectiontopic)
// property. Then, specify the Width/height aspect ratio for each equal area
// projection using the VectorLayerBase.InitialMapSize
// (http://documentation.devexpress.com/#WPF/DevExpressXpfMapVectorLayerBase_InitialMapSizetopic)
// property. To learn more about the equal-area projections, see Cylindrical
// equal-area projection
// (http://en.wikipedia.org/wiki/Cylindrical_equal-area_projection).
// 
// You can find sample updates and versions for different programming languages here:
// http://www.devexpress.com/example=E4253

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AvoidMapDistortion.Properties {


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
